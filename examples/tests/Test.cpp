#include "catch2/catch.hpp"
#include "parkassist/Window.h"
#include "Helper.h"

using namespace nb;

#define WIDTH 1280.0f
#define HEIGHT 800.0f

TEST_CASE("test", "[test]")
{
	Window w(WIDTH, HEIGHT, "test");
	w.setVisible(true);
	std::shared_ptr<Scene> sc = std::make_shared<Scene>(WIDTH, HEIGHT);


	w.ResizeEvent += [&w, &sc](const Size& sz)
	{
		sc->doRender();
		w.swapBuffers();
	};
	w.KeyEvent += [](const int& key)
	{
		switch (key)
		{
		case 262:	break;
		case 263:	break;
		case 32: 	break;
		default:	break;
		}
	};

	auto polygon0 = std::make_shared<Polygon>();
	std::vector<double> side0Array0 = {
		309.62384,492.745056,
		319.485291,484.980103,
		329.332275,477.445313,
		339.139587,470.145447,
		348.883911,463.08371,
		358.543945,456.261963,
		368.100708,449.680725,
		377.536865,443.33905,
		386.837891,437.235046,
		395.991089,431.36554,
		404.986084,425.726563,
		413.814392,420.313293,
		422.469666,415.120117,
		430.946899,410.14093,
		439.243164,405.369232,
		447.356689,400.798096,
		455.286926,396.420471,
		463.034607,392.229034,
		470.601196,388.216492,
		477.989197,384.375641,
		485.201721,380.699127,
		492.242188,377.179962,
		499.114868,373.811096,
		505.823914,370.585815,
		512.374146,367.497559,
		518.770142,364.539978,
		525.017151,361.707031,
		531.119934,358.992828,
		537.083435,356.391846,
		542.912903,353.898682,
		548.612976,351.508331,
		554.188599,349.215942,
		559.644592,347.016846,
		564.985413,344.906769,
		570.215637,342.881531,
		575.339661,340.937195,
		580.361633,339.070068,
		585.285583,337.276611,
		590.11554,335.553497,
		594.855286,333.897522,
		599.508362,332.305786,
		604.078308,330.775421,
		608.568359,329.303711,
		612.981873,327.888184,
		617.321777,326.526428,
		621.591064,325.216156,
		625.792542,323.955261,
		629.928894,322.741638,
		634.002625,321.573425,
		638.016357,320.448761,
		641.97229,319.365967,
		645.872742,318.323334,
		649.719788,317.319336,
		653.515442,316.35257,
	};

	std::vector<double> side1Array0 =
	{
		301.396057,490.559937,
		311.124939,483.00943,
		320.846924,475.676788,
		330.538086,468.566254,
		340.176514,461.68103,
		349.741516,455.022888,
		359.214783,448.592529,
		368.579407,442.389313,
		377.820923,436.411652,
		386.926575,430.656982,
		395.885742,425.121826,
		404.689636,419.801941,
		413.331177,414.692413,
		421.804993,409.787781,
		430.1073,405.082275,
		438.235474,400.569641,
		446.188538,396.243286,
		453.966064,392.096741,
		461.569092,388.12326,
		468.999207,384.31604,
		476.25885,380.668396,
		483.350769,377.173767,
		490.278442,373.825531,
		497.045715,370.617432,
		503.656738,367.543182,
		510.115784,364.596924,
		516.427185,361.772766,
		522.595764,359.065186,
		528.625916,356.468872,
		534.522461,353.978668,
		540.289978,351.589722,
		545.933044,349.297333,
		551.456177,347.097107,
		556.86377,344.984802,
		562.160156,342.956421,
		567.34967,341.008057,
		572.43634,339.13623,
		577.424011,337.337402,
		582.31665,335.608337,
		587.117859,333.945953,
		591.831299,332.347351,
		596.460388,330.809692,
		601.008301,329.330414,
		605.478333,327.906982,
		609.873596,326.537048,
		614.196838,325.218384,
		618.450928,323.948853,
		622.638611,322.726471,
		626.762329,321.549347,
		630.824646,320.415649,
		634.827881,319.323639,
		638.774353,318.271759,
		642.666077,317.258392,
		646.50531,316.282166,
		646.50531,316.282135,
	};
	polygon0->set(Helper::doublesToSide(side0Array0), Helper::doublesToSide(side1Array0));
	std::vector<GradientStop> stops0 = { 
		{ 0.317154437f, Color(255,0,0,255) } ,{ 0.419227988f, Color(255,0,0,255) },
		{ 0.420565426f, Color(255,255,0,255) },{ 0.514280379f, Color(255,255,0,255) },
		{ 0.514919698f, Color(88,255,0,255) } };
	std::vector<GradientStop> stops1 = {
		{ 0.343125403f, Color(255,0,0,255) },{ 0.433331430f, Color(255,0,0,255) },
		{ 0.434439510f, Color(255,255,0,255) },{ 0.505769610f, Color(255,255,0,255) },
		{ 0.505707502f, Color(88,255,0,255) } };
	polygon0->material = std::make_shared<LinearGrandientMaterial>(HEIGHT, stops0);


	auto polygon1 = std::make_shared<Polygon>();
	std::vector<double> polygon1_side0Array0 = {
		1025.536621,472.009583,
		1018.717529,460.773132,
		1012.55957,450.447418,
		1007.07019,440.986176,
		1002.242798,432.336487,
		998.060547,424.4422,
		994.498779,417.246582,
		991.52832,410.694305,
		989.116699,404.732544,
		987.230591,399.311646,
		985.836182,394.385986,
		984.900574,389.9133,
		984.391907,385.855408,
		984.28009,382.177521,
		984.536621,378.848328,
		985.13501,375.8396,
		986.050659,373.125885,
		987.260376,370.684448,
		988.743408,368.49472,
		990.47998,366.538391,
		992.452271,364.798889,
		994.643799,363.261383,
		997.039307,361.912567,
		999.624756,360.740417,
		1002.387329,359.734192,
		1005.315125,358.884094,
		1008.397217,358.181427,
		1011.623413,357.618225,
		1014.984375,357.187347,
		1018.471375,356.882385,
		1022.076416,356.697449,
		1025.791992,356.627289,
		1029.611084,356.667084,
	};

	std::vector<double> polygon1_side1Array0 =
	{
		1019.879089,473.899475,
		1012.863037,462.086914,
		1006.54541,451.262268,
		1000.934387,441.372925,
		996.022217,432.358582,
		991.789246,424.155579,
		988.208008,416.699951,
		985.245422,409.929657,
		982.865723,403.785828,
		981.032104,398.213654,
		979.707581,393.162598,
		978.856445,388.58667,
		978.444336,384.444122,
		978.439087,380.697479,
		978.810303,377.312897,
		979.529907,374.260132,
		980.571777,371.512054,
		981.911987,369.044434,
		983.528442,366.835571,
		985.400818,364.866089,
		987.51062,363.118591,
		989.840698,361.577576,
		992.375427,360.229126,
		995.100464,359.060669,
		998.002686,358.061035,
		1001.069885,357.220154,
		1004.291016,356.528992,
		1007.65564,355.979309,
		1011.154297,355.563843,
		1014.77832,355.27594,
		1018.51947,355.109589,
		1022.370239,355.059448,
		1026.323608,355.120544,
	};
	polygon1->set(Helper::doublesToSide(polygon1_side0Array0), Helper::doublesToSide(polygon1_side1Array0));
	polygon1->material = std::make_shared<LinearGrandientMaterial>(HEIGHT, stops1);

	auto eclipse = std::make_shared<Eclipse>();
	eclipse->set(glm::vec2(100, 100), 30);
	eclipse->material = std::make_shared<ColorMaterial>(Color(255, 0, 0, 255));

	sc->add(polygon0);
	sc->add(polygon1);
	sc->add(eclipse);

	while (true)
	{
		sc->doRender();

		w.swapBuffers();
		Window::pollEvents();
	}
}
